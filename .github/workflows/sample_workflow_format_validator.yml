name: GitHub Actions Check Style of Modified Files
on: [pull_request]
env:
  max_number_errors: 0
jobs:
  changedfiles:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      all: ${{ steps.changes.outputs.all }}
      ts: ${{ steps.changes.outputs.ts }}
    steps:
        # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changes
        # Set outputs using the command.
        run: |
          echo "this is the pull_request.base.sha: ${{ github.event.pull_request.base.sha }} "
          echo "this is the github.sha: ${{ github.sha }} "
          git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.sha }}
          echo "::set-output name=all::$(git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '.twb\|.tds' | xargs )"
          echo "::set-output name=ts::$(git diff --name-status --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep .ts$ | xargs)"
  
  validate-format-twb:
    needs: changedfiles
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create artifact folder
        run: mkdir artifacts
        #########
        ###
        ### Example of using the Tableau Format Validator Action
        ###
        #########
      - name: Validate Tableau Format
        uses: dsmdavid/action-tableau-format-validator@v1.0.0
        with:
          # Use the output created in the step above
          modified_files: ${{needs.changedfiles.outputs.all}}
          # Provide a path to the style guide
          path_to_json: style_guide/example.json
        # Make the resultinf file available to other jobs
      - uses: actions/upload-artifact@v2
        with:
          name: outputs
          path: ./outputs.txt

  add-comment-file-from-file:
    name: add-comment-file
    runs-on: ubuntu-latest
    needs: validate-format-twb
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: outputs
        # Create a summary for a PR comment
      - name: check file exists
        run: |
             find . -name outputs.txt
             cat ./outputs.txt | grep 'ALERT' > summary.txt
             echo "" >> summary.txt
             echo "" >> summary.txt
             echo "" >> summary.txt
             echo "" >> summary.txt
             echo " --------- --------- --------" >> summary.txt
             echo "Detailed review below:" >> summary.txt
             cat ./outputs.txt >> summary.txt
             sed -i 's;\processing /github/workspace\(.*\)$;## \1;gi' summary.txt

      - name: comment PR
        uses: machine-learning-apps/pr-comment@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: ./summary.txt
  pass-fail:
    name: fail-if-errors
    runs-on: ubuntu-latest
    needs: validate-format-twb
    outputs:
      number-of-errors: ${{ steps.setnumber.outputs.number-of-errors }}
    steps:
      # Download the file to ./outputs.txt
      - uses: actions/download-artifact@v2
        with:
          name: outputs
      - name: set-number-of-fail-if-errors
        id: setnumber
        run: |
          echo 'The maximum number of errors allowed is $max_number_errors'
          echo '::set-output name=number-of-errors::$(cat outputs.txt | grep ALERT | wc -l)'
      # Should we stop
      - name: decision-pass-fail      
        if: ${{ steps.setnumber.outputs.number-of-errors }} > ${{ env.max_number_errors }}
        run: |
          echo ${{ steps.setnumber.outputs.number-of-errors }}
          echo "::error ::Invalid formatting found, abort PR".
          exit 1
